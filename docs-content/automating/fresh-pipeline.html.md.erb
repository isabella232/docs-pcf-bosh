---
title: Building a Fresh Deploy Pipeline
owner: PCF BOSH
---

<strong><%= modified_date %></strong>

This topic provides a reference [Concourse](https://concourse.ci/introduction.html) pipeline configuration to automate your Pivotal Cloud Foundry (PCF) deployment, and explains what each part of the pipeline does.

Concourse is a CI/CD solution. For more information about installing Concourse, see the [documentation](https://concourse.ci/installing.html).

This pipeline creates a fresh deploy of PCF and runs destructive tests. It also tears down the environment. As a result, this pipeline is designed for development and test environments. For a pipeline that is better suited for production purposes, see the [Building a Upgrade Pipeline](upgrade-pipeline.html) topic.

##<a id='understand'></a> Understand Concourse Pipelines

A Concourse pipeline is a collection of jobs and resources. Jobs determine the actions performed by the pipeline, while resources are the objects used by those jobs. For more information, see the [Mechanics of a Pipeline](https://concourse.ci/pipeline-mechanics.html) topic in the Concourse documentation.

View the reference pipelines at the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci). This repo includes YAML files, scripts, and the other configuration  needed to build the reference pipeline. 

The Concourse web interface visualizes the pipeline configuration as a series of jobs and resources. In the web interface, the fresh deploy pipeline looks like the following: 

<a href="./images/pipeline.png"><%= image_tag('pipeline.png') %></a>

<p class="note"><strong>Note</strong>: Click <a href="./images/pipeline.png">here</a> to see a larger version of this image.</p>

The following sections explain what each part of the pipeline does, proceeding from left to right. Each section corresponds to a set of manual steps described in the [Installing and Configuring](../installing/) topics.

##<a id='prepare'></a> Prepare Your Environment

The first part of the pipeline prepares your environment for PCF BOSH. 

<p class="note"><strong>Note</strong>: See the reference pipeline YAML <a href="https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/pipelines/pcf-bosh.yml">file</a> in the PCF BOSH CI GitHub repo.</p>

<%= image_tag('pipeline-prepare-env.png') %>

This part of the pipeline contains the `terraform-up` job, which uses the Terraform Concourse Resource to prepare a Google Cloud Platform (GCP) environment for PCF. The job runs against the following resources:

* `terraform` is the [Terraform Concourse Resource](https://github.com/ljfranklin/terraform-resource) that prepares the GCP environment.
* `terraform-vars` is the Terraform variables file that contains information about the GCP environment such as the environment name, the region, and the service account key. In the reference pipeline, this file is retrieved from the PCF BOSH CI Google Cloud Storage (GCS) bucket.
* `terraforming-gcp` is the set of Terraform configuration files that the Terraform Concourse Resource uses, loading variables from the `terraform-vars` file. These configuration files are retrieved from the PCF BOSH Terraforming GCP GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-terraforming-gcp).

<p class="note"><strong>Note</strong>: To prepare your environment with Terraform manually, see the <a href="../installing/prepare-env.html">Preparing Your Environment</a> topic.</p>

##<a id='deploy-director'></a> Deploy the BOSH Director

The second part of the pipeline deploys the BOSH Director, with user management handled by a [User Account and Authentication](https://github.com/cloudfoundry/uaa) (UAA) server and credentials managed by [CredHub](https://github.com/pivotal-cf/credhub-release). 

<%= image_tag('pipeline-deploy-director.png') %>

This part of the pipeline contains the `deploy-director` job. The job executes a shell [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/deploy-director.sh) that uses the BOSH CLI to deploy a BOSH Director with UAA and CredHub on the GCP environment. The script runs against the following resources:

* `terraform-state` is the state file outputted by the `terraform-up` job that ran in the previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director. The first time the pipeline runs, BOSH generates the credentials. The variables in the file include those needed to deploy [`bosh-deployment`](https://github.com/cloudfoundry/bosh-deployment), with one addition: `credhub_aes_key`, a 128-bit hex-encoded AES key required for CredHub.
* `bosh-state` is the state file for your BOSH deployment. The first time the pipeline runs, this file is blank. It must be seeded in the GCS bucket before the pipeline runs. For more information about deployment state files, see the [BOSH documentation](https://bosh.io/docs/using-bosh-init.html#deployment-state).
* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/), which contains the [ops files](https://github.com/pivotal-cf/pcf-bosh-ci/tree/master/ops-files) that configure the BOSH deployment manifest for UAA and CredHub. Ops files specify operations to perform on the manifest.
* `bosh-deployment` is the GitHub [repo](https://github.com/cloudfoundry/bosh-deployment) that contains the BOSH deployment manifest.

<p class="note"><strong>Note</strong>: To deploy the BOSH Director with UAA and CredHub manually, see the <a href="../installing/deploy-director.html">Deploying the BOSH Director</a> topic.</p>

##<a id='upload'></a> Upload the Stemcell and Cloud Config

The third part of the pipeline uploads the stemcell and cloud config to the BOSH Director. The [stemcell](http://bosh.cloudfoundry.org/docs/stemcell.html) is a versioned operating system image wrapped with IaaS-specific packaging, while the [cloud config](http://bosh.cloudfoundry.org/docs/cloud-config.html) is a YAML file that defines IaaS-specific configuration used by the BOSH Director and all BOSH deployments.

<%= image_tag('pipeline-upload.png') %>

This part of the pipeline contains the following jobs:

* `upload-stemcell` executes two shell scripts. The [first](https://github.com/pivotal-cf/pcf-bosh-ci/blob/32275cc6bc7eadfa4629abde0903a73799cf4b4f/tasks/stemcell-url-from-cf-deployment.sh) extracts the stemcell version from the Cloud Foundry deployment manifest and retrieves the URL of the stemcell on bosh.io. The [second](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/upload-stemcell.sh) uses that URL to upload the stemcell to the BOSH Director with the BOSH CLI. The scripts run against the following resources:

	* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
	<p class="note"><strong>Note</strong>: The Concourse web interface uses grey text to indicate resources that are not modified by the job.</p>
	* `bosh-creds` is the file that contains the BOSH Director credentials outputted by the `deploy-director` job, retrieved from the GCS bucket. The second script executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can upload the stemcell.
	* `cf-deployment` is the `cf-deployment` GitHub [repo](https://github.com/cloudfoundry/cf-deployment) that contains the Cloud Foundry deployment manifest.
	* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the `upload-stemcell` job.

	<p class="note"><strong>Note</strong>: To upload the stemcell manually, see the <a href="../installing/upload-stemcell.html">Uploading the Stemcell</a> topic.</p>

* `upload-cloud-config` executes a shell [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/upload-cloud-config.sh) that uses the BOSH CLI to upload the cloud config to the BOSH Director. It runs against the following resources:

	* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
	* `bosh-creds` is the file that contains the BOSH Director credentials outputted by the `deploy-director` job, retrieved from the GCS bucket. The shell script executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can upload the cloud config.
	* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the `upload-stemcell` job. 
	* `cloud-config` is the cloud config [file](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/master/cloud-config.yml), retrieved from the `p-ert-bosh-experiment` GitHub [repo](https://github.com/pivotal-cf/p-ert-bosh-experiment).

	<p class="note"><strong>Note</strong>: To upload the cloud config manually, see the <a href="../installing/cloud-config.html">Applying the Cloud Config</a> topic.</p>

##<a id='ert'></a> Deploy Elastic Runtime

The fourth part of the pipeline deploys Elastic Runtime.

<%= image_tag('pipeline-ert.png') %>

This part of the pipeline contains the `deploy-ert` job, which executes two shell scripts. The [first](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/extract-closed-source-releases.sh) unzips a zip containing the closed-source releases required for Elastic Runtime. The [second](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/deploy-ert.sh) uses the BOSH CLI to deploy Elastic Runtime. The scripts run against the following resources:

* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director. The shell script executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can deploy Elastic Runtime.
* `cf-deployment` is the `cf-deployment` GitHub [repo](https://github.com/cloudfoundry/cf-deployment) that contains the Cloud Foundry deployment manifest. The shell script uses the BOSH CLI to deploy Cloud Foundry with this manifest.
* `cf-vars-store` is the file that contains the Cloud Foundry deployment credentials, retrieved from the GCS bucket. The first time the pipeline runs, this file is blank. It must be seeded in the GCS bucket before the pipeline runs. 
* `p-ert` is the `p-ert-bosh-experiment` GitHub [repo](https://github.com/pivotal-cf/p-ert-bosh-experiment) that contains the ops files that configure the Cloud Foundry deployment manifest for Elastic Runtime.
* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the `deploy-pcf` job. 
* `closed-source-releases-zip` is a zip containing the closed-source releases required for Elastic Runtime, retrieved from the GCS bucket. 

<p class="note"><strong>Note</strong>: To deploy Elastic Runtime manually, see the <a href="../installing/ert.html">Configuring and Installing Elastic Runtime</a> topic.</p>

##<a id='ert-errands'></a> Run Errands for Elastic Runtime

This part of the pipeline runs several errands for Elastic Runtime. The jobs that run these errands are distributed over multiple columns. 

All of the jobs execute the same shell [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/run-errand.sh). The script uses the BOSH CLI to run a particular errand, passed as a parameter by the pipeline configuration [file](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/pipelines/pcf-bosh.yml).

The screenshot below displays only those jobs that run errands for Elastic Runtime.

<%= image_tag('pipeline-ert-errands.png') %>

<p class="note"><strong>Note</strong>: Click <a href="./images/pipeline-ert-errands.png">here</a> to see a larger version of this image.</p>

###<a id='column-one'></a> Column One

The first column in this part of the pipeline contains the following jobs:

* `deploy-autoscaling` runs the Deploy Autoscaling [errand](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/1.9/errands/deploy-autoscaling.yml), which installs the Autoscaling release on the Elastic Runtime deployment.
* `mysql-bootstrap` runs the MySQL Recovery Bootstrap [errand](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/master/errands/mysql-recovery/bootstrap.yml), which restarts a MySQL Galera cluster. 
* `mysql-rejoin-unsafe` runs the MySQL Rejoin Unsafe [errand](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/1.9/errands/mysql-recovery/rejoin-unsafe.yml), which forces a node to rejoin a cluster.
* `push-pivotal-account` runs the Push Pivotal Account [errand](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/1.9/errands/push-pivotal-account.yml), which deploys the [Pivotal Account](https://docs.pivotal.io/pivotalcf/opsguide/pivotal-account.html) release.
* `deploy-notifications` runs the Deploy Notifications [errand](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/1.9/errands/deploy-notifications.yml), which deploys the [Notifications](http://docs.pivotal.io/pivotalcf/adminguide/notifications.html) release.

The jobs run against the following resources:

* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director. The shell script executed by the jobs executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can run the errands.
* `cf-deployment` is the `cf-deployment` GitHub [repo](https://github.com/cloudfoundry/cf-deployment) that contains the Cloud Foundry deployment manifest. 
* `cf-vars-store` is the file that contains the Cloud Foundry deployment credentials, retrieved from the GCS bucket. 
* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the jobs. 

###<a id='column-two'></a> Column Two

The second column in this part of the pipeline contains the following jobs:

* `autoscaling-register-broker` runs the Autoscaling Register Broker [errand](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/1.9/errands/autoscaling-register-broker.yml), which registers the Autoscaler service on the [Marketplace](https://docs.pivotal.io/pivotalcf/1-9/devguide/services/managing-services.html).
* `deploy-notifications-ui` runs the Deploy Notifications UI [errand](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/1.9/errands/deploy-notifications-ui.yml), which installs the Notifications UI release on the Elastic Runtime deployment. 
* `push-apps-manager` runs the Push Apps Manager [errand](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/1.9/errands/push-apps-manager.yml), which installs [Apps Manager](https://docs.pivotal.io/pivotalcf/console/index.html) on the Elastic Runtime deployment.

The jobs run against the following resources:

* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director. The shell script executed by the jobs executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can run the errands.
* `cf-deployment` is the `cf-deployment` GitHub [repo](https://github.com/cloudfoundry/cf-deployment) that contains the Cloud Foundry deployment manifest. 
* `cf-vars-store` is the file that contains the Cloud Foundry deployment credentials, retrieved from the GCS bucket. 
* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the jobs. 

###<a id='column-three'></a> Column Three

The third column in this part of the pipeline contains the `smoke-tests` job, which runs the Smoke Tests errand that executes basic functionality tests against Elastic Runtime. The job runs against the following resources:

* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director. The shell script executed by the jobs executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can run the errands.
* `cf-vars-store` is the file that contains the Cloud Foundry deployment credentials, retrieved from the GCS bucket. 
* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the jobs. 

<p class="note"><strong>Note</strong>: To run errands for Elastic Runtime manually, see the <a href="../installing/running-errands-ert.html">Running Errands for Elastic Runtime</a> topic.</p>

##<a id='deploy-mysql'></a> Deploy MySQL for PCF

This part of the pipeline deploys MySQL for PCF. MySQL for PCF enables Elastic Runtime developers to provision MySQL databases by creating instances of the service plans in the Marketplace using [Apps Manager](http://docs.pivotal.io/pivotalcf/console/) or the [cf Command Line Interface (CLI)](http://docs.pivotal.io/pivotalcf/cf-cli/).

<%= image_tag('pipeline-deploy-mysql.png') %>

<p class="note"><strong>Note</strong>: Not all of the resources used by the <code>deploy-mysql</code> job are visible in this screenshot.</p>

The `deploy-mysql` job executes a shell [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/deploy-mysql.sh) that uses the BOSH CLI to deploy MySQL for PCF. It runs against the following resources:

* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the jobs. 
* `p-mysql-deployment` is the `p-mysql-deployment` GitHub [repo](https://github.com/pivotal-cf-experimental/p-mysql-deployment) that contains the deployment [manifest](https://github.com/pivotal-cf-experimental/p-mysql-deployment/blob/master/p-mysql-deployment.yml) for MySQL for PCF.
* `mysql-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the MySQL for PCF deployment.
* `cf-vars-store` is the variables store, retrieved from the GCS bucket, that contains the Cloud Foundry deployment credentials.
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director. 
* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.

<p class="note"><strong>Note</strong>: To deploy MySQL for PCF manually, see the <a href="../installing/p-mysql.html">Configuring and Installing MySQL for PCF</a> topic.</p>

##<a id='mysql-errands'></a> Run Errands for MySQL for PCF

This part of the pipeline runs two errands for MySQL for PCF. The jobs that run these errands are distributed over two columns. 

Both jobs execute the same shell [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/run-errand.sh). The script uses the BOSH CLI to run a particular errand, passed as a parameter by the pipeline configuration [file](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/pipelines/pcf-bosh.yml).

The screenshot below displays only those jobs that run errands for MySQL for PCF.

<%= image_tag('pipeline-mysql-errands.png') %>

<p class="note"><strong>Note</strong>: Click <a href="./images/pipeline-mysql-errands.png">here</a> to see a larger version of this image.</p>

The first column in this part of the pipeline contains the `broker-registrar` job. It runs the Broker Registrar errand, which registers a service broker on Elastic Runtime and exposes the MySQL for PCF service plans on the Marketplace. 

The second column in this part of the pipeline contains the `mysql-smoke-tests` job. It runs the Smoke Tests errand, which executes basic functionality tests against MySQL for PCF.

Both jobs run against the following resources:

* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and tasks required to run the jobs. 
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director.
* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
* `mysql-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the MySQL for PCF deployment.

<p class="note"><strong>Note</strong>: To run errands for MySQL for PCF manually, see the <a href="../installing/running-errands-mysql.html">Running Errands for MySQL for PCF</a> topic.</p>

##<a id='acceptance-tests'></a> Run Acceptance Tests

<p class="note"><strong>Note</strong>: This section is intended for development and test environments only.</p>

This part of the pipeline runs the [Cloud Foundry Acceptance Tests](https://github.com/cloudfoundry/cf-acceptance-tests) (CATS) and the [Routing Acceptance Tests](https://github.com/cloudfoundry-incubator/routing-acceptance-tests) (RATS) against the Elastic Runtime deployment. 

<%= image_tag('pipeline-tests.png') %>

This part of the pipeline contains the following jobs:

* `run-cats` runs two shell scripts. The [first](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/enable-diego-docker.sh) enables Docker-based applications to run on the Elastic Runtime deployment. The [second](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/run-cats.sh) executes CATS. The jobs run against the following resources:

	* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and tasks required to run the jobs. 
	* `cf-acceptance-tests` is the CATS GitHub [repo](https://github.com/cloudfoundry/cf-acceptance-tests).
	* `cf-vars-store` is the file that contains the Cloud Foundry deployment credentials, retrieved from the GCS bucket. 
	* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.

* `run-rats` runs two shell scripts. The [first](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/fetch-routing-release.sh) clones the Cloud Foundry Routing release from its GitHub [repo](https://github.com/cloudfoundry-incubator/routing-release/). The [second](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/run-rats.sh) executes RATS. The jobs run against the following resources:


	* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and tasks required to run the jobs. 
	* `cf-acceptance-tests` is the CATS GitHub [repo](https://github.com/cloudfoundry/cf-acceptance-tests).
	* `cf-deployment` is the `cf-deployment` GitHub [repo](https://github.com/cloudfoundry/cf-deployment) that contains the Cloud Foundry deployment manifest.
	* `cf-vars-store` is the file that contains the Cloud Foundry deployment credentials, retrieved from the GCS bucket. 
	* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.

##<a id='delete-ert'></a> Delete Elastic Runtime

<p class="note"><strong>Note</strong>: This section is intended for development and test environments only.</p>

This part of the pipeline deletes the Elastic Runtime deployment.

<%= image_tag('pipeline-delete-ert.png') %>

<p class="note"><strong>Note</strong>: Not all of the resources used by the <code>delete-ert</code> job are visible in this screenshot.</p>

The `delete-ert` job runs a shell [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/delete-deployment.sh) that uses the BOSH CLI to delete the Elastic Runtime deployment. The job runs against the following resources:

* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the script and task required to run the job.
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director. The `delete-deployment` script executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can delete the Elastic Runtime deployment.
* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.

##<a id='delete-mysql'></a> Delete MySQL for PCF

<p class="note"><strong>Note</strong>: This section is intended for development and test environments only.</p>

This part of the pipeline deletes MySQL for PCF.

The screenshot below displays only the job that deletes MySQL for PCF.

<%= image_tag('pipeline-delete-mysql.png') %>

The `delete-mysql` job runs two shell scripts. The [first](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/run-errand.sh) uses the BOSH CLI to run the Broker Deregistrar errand, which deregisters the service broker from Elastic Runtime and removes the MySQL for PCF service plans from the Marketplace. The [second](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/delete-deployment.sh) uses the BOSH CLI to delete the MySQL for PCF deployment. The job runs against the following resources:

* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and tasks required to run the job.
* `bosh-vars-store` is the variables store, retrieved from the GCS bucket, that contains variables and credentials for the BOSH Director. Both scripts execute another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can run the errand and delete the MySQL for PCF deployment.
* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.



