---
title: Building a Pipeline
owner: PCF BOSH
---

<strong><%= modified_date %></strong>

This topic provides a reference [Concourse](https://concourse.ci/introduction.html) pipeline configuration to automate your Pivotal Cloud Foundry (PCF) deployment, and explains what each part of the pipeline does.

Concourse is a CI/CD solution. For more information about installing Concourse, see the [documentation](https://concourse.ci/installing.html).

##<a id='understand'></a> Understand Concourse Pipelines

A Concourse pipeline is a collection of jobs and resources. Jobs determine the actions performed by the pipeline, while resources are the objects used by those jobs. For more information, see the [Mechanics of a Pipeline](https://concourse.ci/pipeline-mechanics.html) topic in the Concourse documentation.

View the reference pipeline at the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci). This repo includes YAML files, scripts, and the other configuration  needed to build the reference pipeline. 

The Concourse web interface visualizes the pipeline configuration as a series of jobs and resources. In the web interface, the reference pipeline looks like the following: 

<a href="./images/pipeline.png"><%= image_tag('pipeline.png') %></a>

<p class="note"><strong>Note</strong>: Click <a href="./images/pipeline.png">here</a> to see a larger version of this image.</p>

The following sections explain what each part of the pipeline does, proceeding from left to right. Each section corresponds to a set of manual steps described in the [Installing and Configuring](../installing/) topics.

##<a id='prepare'></a> Prepare Your Environment

The first part of the pipeline prepares your environment for PCF BOSH. 

<p class="note"><strong>Note</strong>: See the reference pipeline YAML <a href="https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/pipelines/pcf-bosh.yml">file</a> in the PCF BOSH CI GitHub repo.</p>

<%= image_tag('pipeline-prepare-env.png') %>

This part of the pipeline contains the following jobs:

* `terraform-up` executes a set of Terraform scripts to prepare a Google Cloud Platform (GCP) environment for PCF. The job runs against the following resources:

	* `terraform-vars` is the Terraform variables file that contains information about the GCP environment such as the environment name, the region, and the service account key. In the reference pipeline, this file is retrieved from the PCF BOSH CI Google Cloud Storage (GCS) bucket.
	* `terraforming-gcp` is the set of Terraform scripts that the job runs, loading variables from the `terraform-vars` file. These scripts are retrieved from the PCF BOSH Terraforming GCP GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-terraforming-gcp).

	<p class="note"><strong>Note</strong>: To prepare your environment with Terraform scripts manually, see the <a href="../installing/prepare-env.html">Preparing Your Environment</a> topic.</p>

##<a id='deploy-director'></a> Deploy the BOSH Director

The second part of the pipeline deploys the BOSH Director, with user management handled by a [User Account and Authentication](https://github.com/cloudfoundry/uaa) (UAA) server and credentials managed by [CredHub](https://github.com/pivotal-cf/credhub-release). 

<%= image_tag('pipeline-deploy-director.png') %>

This part of the pipeline contains the `deploy-director` job. The job executes a shell [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/deploy-director.sh) that uses the BOSH CLI to deploy a BOSH Director with UAA and CredHub on the GCP environment. The script runs against the following resources:

* `terraform-state` is the state file outputted by the `terraform-up` job that ran in the previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
* `bosh-creds` is the file that contains the BOSH Director credentials, retrieved from the GCS bucket. The first time the pipeline runs, this file is blank. It must be seeded in the GCS bucket before the pipeline runs.
* `bosh-vars` is the BOSH variables file, retrieved from the GCS bucket. This contains the variables needed to deploy [`bosh-deployment`](https://github.com/cloudfoundry/bosh-deployment), with one addition: `credhub_aes_key`, a 128-bit hex-encoded AES key required for CredHub.
* `bosh-state` is the state file for your BOSH deployment. The first time the pipeline runs, this file is blank. It must be seeded in the GCS bucket before the pipeline runs. For more information about deployment state files, see the [BOSH documentation](https://bosh.io/docs/using-bosh-init.html#deployment-state).
* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/), which contains the [ops files](https://github.com/pivotal-cf/pcf-bosh-ci/tree/master/ops-files) that configure the BOSH deployment manifest for UAA and CredHub. Ops files specify operations to perform on the manifest.
* `bosh-deployment` is the GitHub [repo](https://github.com/cloudfoundry/bosh-deployment) that contains the BOSH deployment manifest.
* `credhub-release` is the tarballed CredHub BOSH release, retrieved from the GCS bucket.

<p class="note"><strong>Note</strong>: To deploy the BOSH Director with UAA and CredHub manually, see the <a href="../installing/deploy-director.html">Deploying the BOSH Director</a> topic.</p>

##<a id='upload'></a> Upload the Stemcell and Cloud Config

The third part of the pipeline uploads the stemcell and cloud config to the BOSH Director. The [stemcell](http://bosh.cloudfoundry.org/docs/stemcell.html) is a versioned operating system image wrapped with IaaS-specific packaging, while the [cloud config](http://bosh.cloudfoundry.org/docs/cloud-config.html) is a YAML file that defines IaaS-specific configuration used by the BOSH Director and all BOSH deployments.

<%= image_tag('pipeline-upload.png') %>

This part of the pipeline contains the following jobs:

* `upload-stemcell` executes two shell scripts. The [first](https://github.com/pivotal-cf/pcf-bosh-ci/blob/32275cc6bc7eadfa4629abde0903a73799cf4b4f/tasks/stemcell-url-from-cf-deployment.sh) extracts the stemcell version from the Cloud Foundry deployment manifest and retrieves the URL of the stemcell on bosh.io. The [second](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/upload-stemcell.sh) uses that URL to upload the stemcell to the BOSH Director with the BOSH CLI. The scripts run against the following resources:

	* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
	<p class="note"><strong>Note</strong>: The Concourse web interface uses grey text to indicate resources that are not modified by the job.</p>
	* `bosh-creds` is the file that contains the BOSH Director credentials outputted by the `deploy-director` job, retrieved from the GCS bucket. The second script executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can upload the stemcell.
	* `cf-deployment` is the `cf-deployment` GitHub [repo](https://github.com/cloudfoundry/cf-deployment) that contains the Cloud Foundry deployment manifest.
	* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the `upload-stemcell` job.

	<p class="note"><strong>Note</strong>: To upload the stemcell manually, see the <a href="../installing/upload-stemcell.html">Uploading the Stemcell</a> topic.</p>

* `upload-cloud-config` executes a shell [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/upload-cloud-config.sh) that uses the BOSH CLI to upload the cloud config to the BOSH Director. It runs against the following resources:

	* `terraform-state` is the state file outputted by the `terraform-up` job that ran in a previous part of the pipeline, which uploaded the file to the GCS bucket. It contains information about the GCP environment.
	* `bosh-creds` is the file that contains the BOSH Director credentials outputted by the `deploy-director` job, retrieved from the GCS bucket. The shell script executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can upload the cloud config.
	* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the `upload-stemcell` job. 
	* `cloud-config` is the cloud config [file](https://github.com/pivotal-cf/p-ert-bosh-experiment/blob/master/cloud-config.yml), retrieved from the `p-ert-bosh-experiment` GitHub [repo](https://github.com/pivotal-cf/p-ert-bosh-experiment).

	<p class="note"><strong>Note</strong>: To upload the cloud config manually, see the <a href="../installing/cloud-config.html">Applying the Cloud Config</a> topic.</p>

##<a id='ert'></a> Deploy Elastic Runtime

The fourth part of the pipeline deploys Elastic Runtime.

<%= image_tag('pipeline-ert.png') %>

This part of the pipeline contains the `deploy-pcf` job, which executes two shell scripts. The [first](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/extract-closed-source-releases.sh) unzips a zip containing the closed-source releases required for Elastic Runtime. The [second](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/tasks/deploy-pcf.sh) uses the BOSH CLI to deploy Elastic Runtime. The scripts run against the following resources:

* `bosh-creds` is the file that contains the BOSH Director credentials outputted by the `deploy-director` job, retrieved from the GCS bucket. The shell script executes another [script](https://github.com/pivotal-cf/pcf-bosh-ci/blob/master/scripts/director-environment) that loads the credentials into the environment so that the BOSH CLI can deploy Elastic Runtime.
* `cf-deployment` is the `cf-deployment` GitHub [repo](https://github.com/cloudfoundry/cf-deployment) that contains the Cloud Foundry deployment manifest. The shell script uses the BOSH CLI to deploy Cloud Foundry with this manifest.
* `cf-creds` is the file that contains the Cloud Foundry deployment credentials, retrieved from the GCS bucket. The first time the pipeline runs, this file is blank. It must be seeded in the GCS bucket before the pipeline runs. 
* `p-ert` is the `p-ert-bosh-experiment` GitHub [repo](https://github.com/pivotal-cf/p-ert-bosh-experiment) that contains the ops files that configure the Cloud Foundry deployment manifest for Elastic Runtime.
* `pcf-bosh-ci` is the PCF BOSH CI GitHub [repo](https://github.com/pivotal-cf/pcf-bosh-ci/) that contains the scripts and task required to run the `deploy-pcf` job. 
* `closed-source-releases-zip` is a zip containing the closed-source releases required for Elastic Runtime, retrieved from the GCS bucket. 

<p class="note"><strong>Note</strong>: To deploy Elastic Runtime manually, see the <a href="../installing/ert.html">Configuring and Installing Elastic Runtime</a> topic.</p>


